/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package string.compression;

public class App {

    public static void main(String[] args) {
        var sc = new StringCompression();
        // var input = "aabcccccaad";
        var input = "abcdeabcde";
        
        var output = sc.compress(input);
        System.out.println(input + " -> " + output);
    }
}

class StringCompression {

    public String compress(String s) {
        char last = s.charAt(0);
        int j = 0;
        int[] compressArr = new int[s.length()];

        for (int i = 0; i < s.length(); i++) {
            char current = s.charAt(i);
            if (current == last) {
                compressArr[j]++;
            } else {
                j++;
                compressArr[j]++;
            }
            last = current;
        }

        for (int i = 0; i < compressArr.length; i++)
            System.out.println(i + " - " + compressArr[i]);

        j = 0;
        int i = 0;
        StringBuilder builder = new StringBuilder();
        boolean noCompression = true;
        while (i < compressArr.length | compressArr[i] != 0) {
            int compressedCharacters = compressArr[i];
            builder = builder.append(s.charAt(j) + "" + compressedCharacters);

            if (compressedCharacters > 1)
                noCompression = false;

            j += compressArr[i];
            i++;
        }

        if (noCompression)
            return s;

        return builder.toString();
    }

    private class CompRange {
        private int left;
        private int right;
        private char element;

        public CompRange(char element, int left, int right) {
            this.element = element;
            this.left = left;
            this.right = right;
        }

        private int size() {
            return (this.right - this.left + 1);
        }
    }
}
